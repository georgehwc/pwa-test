const profileModal = document.querySelector(".Profile-page"),
  moreDetail = document.querySelector(".moreDetail-page");
let defValue = Math.floor(1),
  arrayRecordData = [],
  arrayPrice = [0],
  intMinValue = 1,
  intMaxValue = 1,
  tvid = "",
  setting = !1,
  jackpot = "",
  jackpotTotal = 0,
  chipTotal = 0;
var player1 = document.getElementById("player1").value,
  player2 = document.getElementById("player2").value,
  player3 = document.getElementById("player3").value,
  player4 = document.getElementById("player4").value;
const checkTvid = async () => {
  var e = window.location,
    t = new URL(e).searchParams.get("id");
  if ((console.log(t), null == t)) throw new Error("tvid is null");
  return t;
};
function printPriceTable(e, t, a) {
  for (
    priceTable = document.getElementById("price-table"),
      html =
        " <table>\n  <tr>\n    <th>\n      番\n    </th>\n    <th>\n    出衝\n    </th>\n    <th>\n      自摸(每位)\n    </th>\n  </tr>",
      i = t;
    i <= a;
    i++
  )
    html += `\n    <tr>\n    <th>\n      ${i}\n    </th>\n    <th>\n      ${
      e[i]
    }\n    </th>\n    <th>\n      ${e[i] / 2}\n    </th>\n  </tr>`;
  for (
    html += "</table>",
      priceTable.innerHTML = html,
      eatPriceTable = document.getElementById("eat-price-table"),
      html =
        " <table>\n  <tr>\n    <th>\n      番\n    </th>\n    <th>\n    出衝\n    </th>\n    <th>\n      自摸(每位)\n    </th>\n  </tr>",
      eatPriceTable.innerHTML = html,
      i = t;
    i <= a;
    i++
  )
    html += `\n    <tr>\n    <th>\n      ${i}\n    </th>\n    <th>\n    <button type="button" class="btn-eatPrice" value="${i}"> ${
      e[i]
    }</button>\n     \n    </th>\n    <th>\n    <button type="button" class="btn-eatPrice"  value="${i}"> ${
      e[i] / 2
    }</button>\n    </th>\n  </tr>`;
  (html += "</table>"), (eatPriceTable.innerHTML = html);
  var r = document.querySelectorAll(".btn-eatPrice");
  for (let e = 0; e < r.length; e++) {
    var n = e % 2;
    0 == n &&
      r[e].addEventListener("click", () => {
        switch (
          (MapEatDetail.set("type", "0"),
          confirmModal.classList.add("open"),
          MapEatDetail.set("farn", r[e].value),
          MapEatDetail.set(
            "eat",
            document.getElementById("eatSelect").selectedIndex
          ),
          MapEatDetail.get("eat"))
        ) {
          case 1:
            document.getElementById("confirm-1").disabled = !0;
            break;
          case 2:
            document.getElementById("confirm-2").disabled = !0;
            break;
          case 3:
            document.getElementById("confirm-3").disabled = !0;
            break;
          case 4:
            document.getElementById("confirm-4").disabled = !0;
        }
      }),
      1 == n &&
        r[e].addEventListener("click", () => {
          confirmModal.classList.add("open"),
            MapEatDetail.set("farn", r[e].value),
            MapEatDetail.set(
              "eat",
              document.getElementById("eatSelect").selectedIndex
            ),
            MapEatDetail.set("type", "1"),
            (document.getElementById("modal-confirm-table").style.display =
              "none");
        }),
      (r[e].disabled = !0);
  }
}
function calPrice(e, t) {
  var a = e;
  if (0 == document.getElementById("price-lart").checked)
    for (var r = 0; r < t + 1; r++)
      0 != r
        ? r >= 1 && r <= 3
          ? ((arrayPrice[r] = a), (a *= 2))
          : r >= 4 &&
            (2.4000000000000004 == a
              ? (a = 2.4)
              : 4.800000000000001 == a
              ? (a = 4.8)
              : 0.0024000000000000002 == a
              ? (a = 0.0024)
              : 0.0048000000000000004 == a && (a = 0.0048),
            (arrayPrice[r] = a),
            r % 2 == 0 ? (a *= 1.5) : (a = 2 * arrayPrice[r - 1]))
        : ((arrayPrice[r] = a), (a *= 2));
  else for (r = 0; r < arrayPrice.length; r++) (arrayPrice[r] = a), (a *= 2);
  return (
    "" != tvid &&
      firebase
        .firestore()
        .collection("recipes")
        .doc(tvid)
        .update({ Price: arrayPrice, defValue: e })
        .catch((e) => console.log(e)),
    arrayPrice
  );
}
async function getData() {
  firebase
    .firestore()
    .collection("recipes")
    .doc(tvid)
    .get()
    .then(function (e) {
      if (e.exists) {
        (defValue = e.data().defValue),
          (arrayPrice = e.data().Price),
          (intMinValue = e.data().MinFarn),
          (intMaxValue = e.data().MaxFarn),
          (setting = e.data().setting),
          (jackpot = e.data().Jackpot),
          (chipTotal = Number(e.data().chip)),
          setting && settingCover(jackpot),
          calPrice(defValue, intMaxValue),
          slider.noUiSlider.set([intMinValue, intMaxValue]);
        let t = e.data().round.length;
        for (let a = 0; a < t; a++) arrayRecordData[a] = e.data().round[a];
      } else console.log("No such document!"), showNotification("資料有錯");
    })
    .then(() => {
      (document.getElementById("range-value-1").innerHTML = intMinValue),
        (document.getElementById("range-value-2").innerHTML = intMaxValue),
        (document.getElementById("head-jackpot").innerHTML =
          "" == jackpot ? "<del>jackpot</del>" : "jackpot ="),
        (document.getElementById("max-farn").innerHTML =
          "最大" + intMaxValue + "番" + arrayPrice[intMaxValue] + "蚊");
    })
    .then(() => {
      showRecord(),
        calPrice(defValue, intMaxValue),
        printPriceTable(arrayPrice, intMinValue, intMaxValue);
    })
    .catch(function (e) {
      throw (
        (console.log("Error getting document:", e), new Error("getData error "))
      );
    });
}
async function showRecord() {
  var e = document.getElementById("record-table-body"),
    t = 0,
    a = 0,
    r = 0,
    n = 0;
  jackpotTotal = 0;
  for (let e = 1; e < arrayRecordData.length + 1; e++)
    (t =
      "" == arrayRecordData[e - 1][1] ? 0 + t : arrayRecordData[e - 1][1] + t),
      (a =
        "" == arrayRecordData[e - 1][2]
          ? 0 + a
          : arrayRecordData[e - 1][2] + a),
      (r =
        "" == arrayRecordData[e - 1][3]
          ? 0 + r
          : arrayRecordData[e - 1][3] + r),
      (n =
        "" == arrayRecordData[e - 1][4]
          ? 0 + n
          : arrayRecordData[e - 1][4] + n),
      2 == arrayRecordData[e - 1][5] &&
        (jackpotTotal = 4 * jackpot + jackpotTotal),
      arrayRecordData[e - 1][0] == intMaxValue && (jackpotTotal = 0);
  (document.getElementById("head-jackpot-value").innerHTML = jackpotTotal),
    (e.innerHTML = `<tr>\n  <td class="tg-baqh">起始 ($${chipTotal})</td>\n  <td class="tg-baqh">${
      t + chipTotal
    }</td>\n  <td class="tg-baqh">${
      a + chipTotal
    }</td>\n  <td class="tg-baqh">${
      r + chipTotal
    }</td>\n  <td class="tg-baqh">${n + chipTotal}</td>\n  </tr>`),
    (document.getElementById("playerscore1").innerHTML = t),
    (document.getElementById("playerscore2").innerHTML = a),
    (document.getElementById("playerscore3").innerHTML = r),
    (document.getElementById("playerscore4").innerHTML = n),
    showRecordBody().then(() => {
      document.querySelectorAll(".recordRound").forEach((e) => {
        e.addEventListener("click", (t) => {
          moreDetail.classList.add("open"), showDetail(e.id);
        });
      });
    });
}
function showDetail(e) {
  let t = e.replace("recordRound", "");
  (document.getElementById("detailround").innerHTML = parseInt(t) + 1),
    (document.getElementById("detailplayer1").innerHTML =
      arrayRecordData[t][1]),
    (document.getElementById("detailplayer2").innerHTML =
      arrayRecordData[t][2]),
    (document.getElementById("detailplayer3").innerHTML =
      arrayRecordData[t][3]),
    (document.getElementById("detailplayer4").innerHTML =
      arrayRecordData[t][4]),
    (document.getElementById("detailTime").innerHTML = arrayRecordData[t].time);
  let a = "",
    r = 0;
  for (let e = 1; e < 5; e++)
    if (arrayRecordData[t][e] > 0) {
      r = "player" + e;
      break;
    }
  switch (r) {
    case "player1":
      r = player1;
      break;
    case "player2":
      r = player2;
      break;
    case "player3":
      r = player3;
      break;
    case "player4":
      r = player4;
  }
  switch (arrayRecordData[t][5]) {
    case "0":
      let e = 0;
      for (let a = 1; a < 5; a++)
        if (arrayRecordData[t][a] < 0) {
          console.log(a), (e = "player" + a);
          break;
        }
      switch (e) {
        case "player1":
          e = player1;
          break;
        case "player2":
          e = player2;
          break;
        case "player3":
          e = player3;
          break;
        case "player4":
          e = player4;
      }
      a = r + " 食左 " + e + arrayRecordData[t][0] + "番";
      break;
    case "1":
      a = r + " 自摸左 " + arrayRecordData[t][0] + "番";
      break;
    case 2:
      a = " 流左局";
  }
  (document.getElementById("detailDetail").innerHTML = a),
    t == arrayRecordData.length - 2 || t == arrayRecordData.length - 1
      ? (document.getElementById("detailMid").style.display = "inline")
      : (document.getElementById("detailMid").style.display = "none");
}
async function showRecordBody() {
  var e = "";
  for (let t = 0; t < arrayRecordData.length; t++)
    e += `<tr id="recordRound${t}" class="recordRound" >\n    <td class="tg-baqh">       ${
      t + 1
    } </td>\n    <td class="tg-baqh">${
      arrayRecordData[t][1]
    }</td>\n    <td class="tg-baqh">${
      arrayRecordData[t][2]
    }</td>\n    <td class="tg-baqh">${
      arrayRecordData[t][3]
    }</td>\n    <td class="tg-baqh">${arrayRecordData[t][4]}</td>\n    </tr>`;
  document.getElementById("record-table-body").innerHTML += e;
}
moreDetail.addEventListener("click", (e) => {
  e.target.classList.contains("moreDetail-page") &&
    moreDetail.classList.remove("open");
}),
  document.getElementById("detailDel").addEventListener("click", (e) => {
    delRecord(document.getElementById("detailround").innerHTML),
      showRecord(),
      moreDetail.classList.remove("open");
  }),
  checkTvid()
    .then((e) => {
      tvid = e;
    })
    .then(() => {
      getData();
    })
    .then(() => {
      firebase
        .firestore()
        .collection("recipes")
        .doc(tvid)
        .onSnapshot((e) => {
          getData().then(() => {
            showRecord();
          });
          let t = e.data().round.length;
          for (let a = 0; a < t; a++) arrayRecordData[a] = e.data().round[a];
          var a = document.querySelectorAll(".playername");
          (player1 = e.data().PlayerName.player1),
            (player2 = e.data().PlayerName.player2),
            (player3 = e.data().PlayerName.player3),
            (player4 = e.data().PlayerName.player4),
            a.forEach((t) => {
              t.classList.contains("player1") &&
                ((t.innerHTML = e.data().PlayerName.player1),
                (t.value = e.data().PlayerName.player1)),
                t.classList.contains("player2") &&
                  ((t.innerHTML = e.data().PlayerName.player2),
                  (t.value = e.data().PlayerName.player2)),
                t.classList.contains("player3") &&
                  ((t.innerHTML = e.data().PlayerName.player3),
                  (t.value = e.data().PlayerName.player3)),
                t.classList.contains("player4") &&
                  ((t.innerHTML = e.data().PlayerName.player4),
                  (t.value = e.data().PlayerName.player4));
            });
        });
    })
    .then(() => {
      showRecord();
    })
    .catch((e) => {
      console.log(e), showNotification("Error");
    });
const eatButton = document.querySelector(".eat-button");
function checkSetting() {}
(document.getElementById("recipes").style.display = "none"),
  eatButton.addEventListener("click", () => {
    if (0 == setting) {
      showNotification("請先完成設定"),
        document.querySelector(".setting-page").classList.add("open");
    } else profileModal.classList.add("open"), console.log("open");
  }),
  profileModal.addEventListener("click", (e) => {
    e.target.classList.contains("Profile-page") &&
      (profileModal.classList.remove("open"),
      (document.getElementById("selectDefault").selected = "true"),
      (document.getElementById("eatSelect").value = ""),
      document.querySelectorAll(".btn-eatPrice").forEach((e) => {
        e.disabled = !0;
      }));
  });
var recordTableHead = document.getElementById("record-table-head");
recordTableHead.innerHTML =
  '\n<tr>\n  <th class="tg-c3ow"></th>\n  <th class="tg-c3ow playername player1">~</th>\n  <th class="tg-c3ow playername player2">~</th>\n  <th class="tg-c3ow playername player3">~</th>\n  <th class="tg-c3ow playername player4">~</th>\n</tr>';
var MapEatDetail = new Map([
  ["eat", "default"],
  ["farn", 0],
  ["gotEat", "default"],
  ["type", 0],
]);
function delRecord(e) {
  const t = {
    0: arrayRecordData[(e -= 1)][0],
    1: arrayRecordData[e][1],
    2: arrayRecordData[e][2],
    3: arrayRecordData[e][3],
    4: arrayRecordData[e][4],
    5: arrayRecordData[e][5],
    time: arrayRecordData[e].time,
  };
  for (var a = 0; a < arrayRecordData.length; a++)
    JSON.stringify(arrayRecordData[a]) === JSON.stringify(t) &&
      (arrayRecordData.splice(a, 1), a--);
  firebase
    .firestore()
    .collection("recipes")
    .doc(tvid)
    .update({ round: firebase.firestore.FieldValue.arrayRemove(t) })
    .then(function (e) {
      console.log("Success update del delNewRecord");
    })
    .catch((e) => console.log(e));
}
function MakeNewRecord() {
  arrayRecordData.push(new Array(6));
  for (var e = 0; e < 6; e++)
    arrayRecordData[arrayRecordData.length - 1][e] = 0;
  if (
    ((arrayRecordData[arrayRecordData.length - 1][0] = MapEatDetail.get(
      "farn"
    )),
    1 == MapEatDetail.get("type"))
  ) {
    for (let e = 1; e < 5; e++)
      arrayRecordData[arrayRecordData.length - 1][e] =
        (arrayPrice[MapEatDetail.get("farn")] / 2) * -1;
    arrayRecordData[arrayRecordData.length - 1][MapEatDetail.get("eat")] =
      (arrayPrice[MapEatDetail.get("farn")] / 2) * 3;
  } else if (0 == MapEatDetail.get("type"))
    (arrayRecordData[arrayRecordData.length - 1][MapEatDetail.get("eat")] =
      arrayPrice[MapEatDetail.get("farn")]),
      (arrayRecordData[arrayRecordData.length - 1][MapEatDetail.get("gotEat")] =
        arrayPrice[MapEatDetail.get("farn")] -
        2 * arrayPrice[MapEatDetail.get("farn")]);
  else if (2 == MapEatDetail.get("type"))
    for (let e = 1; e < 5; e++)
      arrayRecordData[arrayRecordData.length - 1][e] = jackpot - 2 * jackpot;
  return (
    MapEatDetail.get("farn") == intMaxValue &&
      ((arrayRecordData[arrayRecordData.length - 1][
        MapEatDetail.get("eat")
      ] += jackpotTotal),
      (jackpotTotal = 0)),
    (arrayRecordData[arrayRecordData.length - 1][5] = MapEatDetail.get("type")),
    (arrayRecordData[arrayRecordData.length - 1].time = timeConverter(
      Date.now()
    )),
    console.table(arrayRecordData)
  );
}
const mul = (e, t) => {
    if (!e || !t)
      return (
        console.log("Error: 乘法运算需要传入2个数字"), "乘法运算需要传入2个数字"
      );
    let a = 0,
      r = 0;
    try {
      a = e.toString().split(".")[1].length;
    } catch (e) {}
    try {
      r = t.toString().split(".")[1].length;
    } catch (e) {}
    return (
      (Number(e.toString().replace(".", "")) *
        Number(t.toString().replace(".", ""))) /
      10 ** (a + r)
    );
  },
  div = (e, t) => {
    if (!e || !t)
      return (
        console.log("Error: 减法运算需要传入2个数字"), "减法运算需要传入2个数字"
      );
    let a = 0,
      r = 0;
    try {
      a = e.toString().split(".")[1].length;
    } catch (e) {}
    try {
      r = t.toString().split(".")[1].length;
    } catch (e) {}
    return (
      (Number(e.toString().replace(".", "")) * 10 ** (a + r)) /
      (Number(t.toString().replace(".", "")) * 10 ** (a + r)) /
      10 ** (a - r)
    );
  };
var playerName = document.querySelectorAll(".playername");
function nameChange(e, t) {
  console.log(e, t);
  document.querySelectorAll(".playername");
  (player1 = document.getElementById("player1").value),
    (player2 = document.getElementById("player2").value),
    (player3 = document.getElementById("player3").value),
    (player4 = document.getElementById("player4").value),
    firebase
      .firestore()
      .collection("recipes")
      .doc(tvid)
      .update({
        PlayerName: {
          player1: document.getElementById("player1").value,
          player2: document.getElementById("player2").value,
          player3: document.getElementById("player3").value,
          player4: document.getElementById("player4").value,
        },
      })
      .then(function (e) {
        console.log("firebase: name change ");
      })
      .catch((e) => console.log(e));
}
playerName.forEach((e) => {
  for (let a = 1; a < 5; a++) {
    var t = "player" + a;
    e.classList.contains(t) &&
      ((e.value = document.getElementById(t).value),
      (e.innerText = document.getElementById(t).value),
      (e.title = a));
  }
});
const settingDiv = document.getElementById("setting-div"),
  settingModal = document.querySelector(".setting-page");
function settingCover(e) {
  if (1 == document.getElementById("setting-submit").disabled) return 0;
  (document.querySelector(".setting-page .modal").scrollTop = 0),
    (document.getElementById("player1").disabled = !0),
    (document.getElementById("player2").disabled = !0),
    (document.getElementById("player3").disabled = !0),
    (document.getElementById("player4").disabled = !0),
    slider.setAttribute("disabled", !0),
    (document.getElementById("price-lart").disabled = !0),
    (document.getElementById("price-d10").disabled = !0),
    (document.getElementById("price-d2").disabled = !0),
    (document.getElementById("price-reset").disabled = !0),
    (document.getElementById("price-x2").disabled = !0),
    (document.getElementById("price-x10").disabled = !0),
    (document.getElementById("setting-jackpot").disabled = !0),
    (document.getElementById("setting-jackpot-input").disabled = !0),
    (document.getElementById("setting-jackpot-input").value = e),
    (document.getElementById("setting-chip").disabled = !0),
    (document.getElementById("setting-chip-input").disabled = !0),
    (document.getElementById("setting-invite").style.display = "block"),
    (document.getElementById("setting-submit").disabled = !0);
}
function copyToClipboard(e) {
  if (window.clipboardData && window.clipboardData.setData)
    return clipboardData.setData("Text", e);
  if (
    document.queryCommandSupported &&
    document.queryCommandSupported("copy")
  ) {
    var t = document.createElement("textarea");
    (t.textContent = e),
      (t.style.position = "fixed"),
      document.body.appendChild(t),
      t.select();
    try {
      return document.execCommand("copy");
    } catch (e) {
      return console.warn("Copy to clipboard failed.", e), !1;
    } finally {
      document.body.removeChild(t);
    }
  }
}
profileModal.addEventListener("click", (e) => {
  e.target.classList.contains("Profile-page") &&
    profileModal.classList.remove("open");
}),
  settingDiv.addEventListener("click", () => {
    settingModal.classList.add("open");
  }),
  document.getElementById("setting-submit").addEventListener("click", (e) => {
    e.preventDefault(),
      (setting = !0),
      firebase
        .firestore()
        .collection("recipes")
        .doc(tvid)
        .update({ setting: !0 })
        .then(() => {
          settingCover(), getData(), showNotification("設定完成咗啦");
        })
        .catch((e) => console.log(e));
  }),
  settingModal.addEventListener("click", (e) => {
    e.target.classList.contains("setting-page") &&
      settingModal.classList.remove("open");
  });
var slider = document.getElementById("farn-slider");
noUiSlider.create(slider, {
  start: [intMinValue, intMaxValue],
  connect: !0,
  step: 1,
  range: { min: 0, max: 13 },
  pips: { mode: "steps", stepped: !0, density: 10 },
});
var lart = document.getElementById("price-lart");
lart.addEventListener("change", (e) => {
  calPrice(defValue, intMaxValue),
    printPriceTable(arrayPrice, intMinValue, intMaxValue);
}),
  slider.noUiSlider.on("change", function (e, t) {
    (document.getElementById("range-value-1").innerHTML = Math.floor(e[0])),
      (document.getElementById("range-value-2").innerHTML = Math.floor(e[1])),
      (intMinValue = Math.floor(e[0])),
      (intMaxValue = Math.floor(e[1])),
      (arrayPrice = new Array(intMaxValue + 1)),
      calPrice(defValue, intMaxValue),
      printPriceTable(arrayPrice, intMinValue, intMaxValue),
      (document.getElementById("max-farn").innerHTML =
        "最大" + intMaxValue + "番" + arrayPrice[intMaxValue] + "蚊"),
      "" != tvid &&
        firebase
          .firestore()
          .collection("recipes")
          .doc(tvid)
          .update({ MinFarn: intMinValue, MaxFarn: intMaxValue })
          .catch((e) => console.log(e));
  }),
  document.getElementById("price-d10").addEventListener("click", function () {
    (defValue = div(defValue, 10)) < 1e-4
      ? (alert("打咁細點比錢呀? 比bitcoin都比唔到啦"),
        (defValue = mul(defValue, 10)))
      : (calPrice(defValue, intMaxValue),
        printPriceTable(arrayPrice, intMinValue, intMaxValue));
  }),
  document.getElementById("price-d2").addEventListener("click", function () {
    (defValue = div(defValue, 2)) < 1e-4
      ? (alert("打咁細點比錢呀? 比bitcoin都比唔到啦"),
        (defValue = mul(defValue, 2)))
      : (calPrice(defValue, intMaxValue),
        printPriceTable(arrayPrice, intMinValue, intMaxValue));
  }),
  document.getElementById("price-x2").addEventListener("click", function () {
    calPrice((defValue = mul(defValue, 2)), intMaxValue),
      printPriceTable(arrayPrice, intMinValue, intMaxValue);
  }),
  document.getElementById("price-x10").addEventListener("click", function () {
    calPrice((defValue = mul(defValue, 10)), intMaxValue),
      printPriceTable(arrayPrice, intMinValue, intMaxValue);
  }),
  document.getElementById("price-reset").addEventListener("click", function () {
    calPrice((defValue = 1), intMaxValue),
      printPriceTable(arrayPrice, intMinValue, intMaxValue);
  });
var eatSelect = document.getElementById("eatSelect");
eatSelect.addEventListener("change", (e) => {
  "" != eatSelect.value &&
    document.querySelectorAll(".btn-eatPrice").forEach((e) => {
      e.disabled = !1;
    });
});
var confirmEat = document.querySelectorAll(".confirm-eat .playerbox");
document.getElementById("eat-confirm").addEventListener("click", (e) => {
  if ("default" == MapEatDetail.get("gotEat") && "" == eatSelect.value)
    showNotification("邊個出衝?");
  else if (
    MapEatDetail.get("eat") == MapEatDetail.get("gotEat") &&
    0 == MapEatDetail.get("type")
  )
    showNotification("出衝點會同食糊係同一個人呀");
  else {
    console.log("confrim eat"), MakeNewRecord(), showRecord();
    const e = {
      0: arrayRecordData[arrayRecordData.length - 1][0],
      1: arrayRecordData[arrayRecordData.length - 1][1],
      2: arrayRecordData[arrayRecordData.length - 1][2],
      3: arrayRecordData[arrayRecordData.length - 1][3],
      4: arrayRecordData[arrayRecordData.length - 1][4],
      5: arrayRecordData[arrayRecordData.length - 1][5],
      time: arrayRecordData[arrayRecordData.length - 1].time,
    };
    firebase
      .firestore()
      .collection("recipes")
      .doc(tvid)
      .update({ round: firebase.firestore.FieldValue.arrayUnion(e) })
      .then(function (e) {
        console.log("Created new record ");
      })
      .catch((e) => console.log(e)),
      profileModal.classList.remove("open"),
      (document.getElementById("selectDefault").selected = "true"),
      (document.getElementById("eatSelect").value = ""),
      document.querySelectorAll(".btn-eatPrice").forEach((e) => {
        e.disabled = !0;
      }),
      confirmModal.classList.remove("open"),
      confirmEat.forEach((e) => {
        e.classList.remove("selected"), (e.disabled = !1);
      }),
      MapEatDetail.set("eat", "default"),
      MapEatDetail.set("gotEat", "default"),
      (document.getElementById("modal-confirm-table").style.display = "block");
  }
}),
  confirmEat.forEach((e) => {
    e.addEventListener("click", (t) => {
      confirmEat.forEach((e) => {
        e.classList.remove("selected");
      }),
        e.classList.add("selected"),
        MapEatDetail.set("gotEat", e.title);
    });
  });
const confirmModal = document.querySelector(".confirm-page");
confirmModal.addEventListener("click", (e) => {
  e.target.classList.contains("confirm-page") &&
    (confirmModal.classList.remove("open"),
    (document.getElementById("modal-confirm-table").style.display = "block"),
    confirmEat.forEach((e) => {
      e.classList.remove("selected"), (e.disabled = !1);
    }));
});
const lauGuk = document.getElementById("eat-lauGuk");
lauGuk.addEventListener("click", (e) => {
  MapEatDetail.set("eat", 0),
    MapEatDetail.set("farn", 0),
    MapEatDetail.set("gotEat", 0),
    MapEatDetail.set("type", 2),
    confirmModal.classList.add("open"),
    (document.getElementById("modal-confirm-table").style.display = "none");
}),
  document
    .getElementById("setting-jackpot-input")
    .addEventListener("change", (e) => {
      firebase
        .firestore()
        .collection("recipes")
        .doc(tvid)
        .update({
          Jackpot: document.getElementById("setting-jackpot-input").value,
        })
        .then(() => {
          console.log("Jackpot"),
            (jackpot = document.getElementById("setting-jackpot-input").value);
        })
        .catch((e) => console.log(e));
    }),
  document.getElementById("setting-jackpot").addEventListener("change", (e) => {
    0 == document.getElementById("setting-jackpot-input").disabled
      ? ((document.getElementById("setting-jackpot-input").disabled = !0),
        (document.getElementById("setting-jackpot-input").value = ""),
        firebase
          .firestore()
          .collection("recipes")
          .doc(tvid)
          .update({
            Jackpot: document.getElementById("setting-jackpot-input").value,
          })
          .then(() => {
            console.log("Jackpot"),
              (jackpot = document.getElementById("setting-jackpot-input")
                .value);
          })
          .catch((e) => console.log(e)))
      : 1 == document.getElementById("setting-jackpot-input").disabled &&
        ((document.getElementById("setting-jackpot-input").disabled = !1),
        firebase
          .firestore()
          .collection("recipes")
          .doc(tvid)
          .update({
            Jackpot: document.getElementById("setting-jackpot-input").value,
          })
          .then(() => {
            console.log("Jackpot"),
              (jackpot = document.getElementById("setting-jackpot-input")
                .value);
          })
          .catch((e) => console.log(e)));
  }),
  document
    .getElementById("setting-chip-input")
    .addEventListener("change", (e) => {
      firebase
        .firestore()
        .collection("recipes")
        .doc(tvid)
        .update({ chip: document.getElementById("setting-chip-input").value })
        .then(() => {
          console.log("chip"),
            (jackpot = document.getElementById("setting-chip-input").value);
        })
        .catch((e) => console.log(e));
    }),
  document.getElementById("setting-chip").addEventListener("change", (e) => {
    0 == document.getElementById("setting-chip-input").disabled
      ? ((document.getElementById("setting-chip-input").disabled = !0),
        (document.getElementById("setting-chip-input").value = ""),
        firebase
          .firestore()
          .collection("recipes")
          .doc(tvid)
          .update({ chip: document.getElementById("setting-chip-input").value })
          .then(() => {
            console.log("chip"),
              (jackpot = document.getElementById("setting-chip-input").value);
          })
          .catch((e) => console.log(e)))
      : 1 == document.getElementById("setting-chip-input").disabled &&
        ((document.getElementById("setting-chip-input").disabled = !1),
        firebase
          .firestore()
          .collection("recipes")
          .doc(tvid)
          .update({ chip: document.getElementById("setting-chip-input").value })
          .then(() => {
            console.log("chip"),
              (jackpot = document.getElementById("setting-chip-input").value);
          })
          .catch((e) => console.log(e)));
  });
var qrcode = new QRCode("qrcode", {
  width: 256,
  height: 256,
  colorDark: "#000000",
  colorLight: "#ffffff",
  correctLevel: QRCode.CorrectLevel.H,
});
function makeCode() {
  qrcode.makeCode(shareId());
}
makeCode();
